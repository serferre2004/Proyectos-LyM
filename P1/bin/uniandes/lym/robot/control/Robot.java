/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {

        private static final int NORTH = 0;
        private static final int SOUTH = 1;
        private static final int EAST = 2;
        private static final int WEST = 3;
        private RobotWorldDec world;
        private RobotWorld world2;
        public Map<String, Integer> listaVariables = new HashMap<String, Integer>();
        public Map<String, ArrayList<String>> listaProcedures = new HashMap<String, ArrayList<String>>();

        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }
        String salida=new String();

//boolean command(uniandes.lym.robot.view.Console sistema) :
  final public         boolean command(Console sistema) throws ParseException {boolean result;
    label_1:
    while (true) {
      result = single_command(sistema, true);
{if ("" != null) return result;}
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case 41:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    throw new Error("Missing return statement in function");
}

  final public boolean single_command(Console sistema, boolean exec) throws ParseException, Error {int x,y;
                salida=new String();
                boolean cond;
                String name=new String();
                int valor;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 41:{
      jj_consume_token(41);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        name = name();
        valor = num();
if(exec) {  if (listaVariables.containsKey(name)) { listaVariables.put(name, valor); salida = "Command: Value "+valor+" assigned to "+name; }else { salida = "No variable named "+name; } }
        break;
        }
      case MOV:{
        jj_consume_token(MOV);
        x = num();
if(exec) { world.moveForward(x,false);salida = "Command: Moveforward ";}
        break;
        }
      case SKP:{
        jj_consume_token(SKP);
        x = num();
if(exec) {world.moveForward(x,true);salida = "Command: Skip";}
        break;
        }
      case TURN:{
        jj_consume_token(TURN);
        turn(exec);
        break;
        }
      case FACE:{
        jj_consume_token(FACE);
        face(exec);
        break;
        }
      case PUT:{
        jj_consume_token(PUT);
        put(exec);
        break;
        }
      case PICK:{
        jj_consume_token(PICK);
        get(exec);
        break;
        }
      case MOVDIR:{
        jj_consume_token(MOVDIR);
        move_dir(exec);
        break;
        }
      case RUNDIRS:{
        jj_consume_token(RUNDIRS);
        run_dirs(exec);
        break;
        }
      case MOVFACE:{
        jj_consume_token(MOVFACE);
        move_face(exec);
        break;
        }
      case NULL:{
        jj_consume_token(NULL);
if(exec){salida = "Command: null"; }
        break;
        }
      case IF:{
        jj_consume_token(IF);
        jj_consume_token(41);
        cond = condition();
        jj_consume_token(42);
        single_command(sistema,cond && exec);
        single_command(sistema,!cond && exec);
        break;
        }
      case LOOP:{
        jj_consume_token(LOOP);
        cond = condition();
        single_command(sistema, exec);
        break;
        }
      case REPEAT:{
        jj_consume_token(REPEAT);
        x = num();
        single_command(sistema, exec);
        break;
        }
      case DEFVAR:{
        jj_consume_token(DEFVAR);
        name = name();
        valor = num();
if(exec) { listaVariables.put(name, valor); salida = "Command: variable "+name+" created with value: "+valor; }
        break;
        }
      case DEFUN:{
        jj_consume_token(DEFUN);
        name = name();
if(exec){listaProcedures.put(name, new ArrayList<String>()); }
        jj_consume_token(41);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NOMBRE:{
            ;
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          jj_consume_token(NOMBRE);
if(exec){ listaProcedures.get(name).add(token.image);listaVariables.put(name, 0); }
        }
        jj_consume_token(42);
        single_command(sistema,true);
if(exec){ for (String par:listaProcedures.get(name)) { listaVariables.remove(par); } }
        break;
        }
      case NOMBRE:{
        jj_consume_token(NOMBRE);
if(exec){ if (!listaProcedures.containsKey(token.image)) { {if (true) throw new Error("Function "+token.image+" not defined");} } }
        fun_call(token.image, exec);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(42);
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void put(boolean exec) throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      f = num();
if(exec) {world.putChips(f); salida = "Command:  Put Chips"; }
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      f = num();
if(exec){world.putBalloons(f); salida = "Command:  Put Balloons";}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void get(boolean exec) throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      f = num();
if(exec){world.pickChips(f);salida = "Command:  Pick chips";}
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      f = num();
if(exec){world.grabBalloons(f);salida="Command:  Pick balloons";}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void turn(boolean exec) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      jj_consume_token(LEFT);
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
      break;
      }
    case AROUND:{
      jj_consume_token(AROUND);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if(exec){world.turnRight();if (!token.image.equals(":right")){world.turnRight();}if (token.image.equals(":left")) { world.turnRight(); }salida = "Command: turn "+token.image; }
}

  final public void face(boolean exec) throws ParseException {int orientation;
    jj_consume_token(CARDINAL);
if(exec)
                {String O = token.image;
                 if (O.equals(":north")) {orientation = NORTH;}
                 else if (O.equals(":south")) {orientation = SOUTH;}
                 else if (O.equals(":east")) {orientation = EAST;}
                 else {orientation = WEST;}
                 while (world.getFacing() != orientation) { world.turnRight(); }
                 salida = "Command: face "+token.image;
                }
}

  final public void turn_dir(boolean exec) throws ParseException {String dir;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FRONT:{
      jj_consume_token(FRONT);
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if(exec) {
                dir = token.image;
                if (!dir.equals(":front")) {
                  world.turnRight();
                  if (!dir.equals(":right")){
                    world.turnRight();}
                  if (dir.equals(":left")) {
                      world.turnRight(); }
                      }}
}

  final public void move_dir(boolean exec) throws ParseException {int facing = world.getFacing(); int x;
    x = num();
    turn_dir(exec);
if(exec) {world.moveForward(x,false);
                while (world.getFacing() != facing) { world.turnRight();}
                salida = "Command: move-dir";}
}

  final public void run_dirs(boolean exec) throws ParseException {int facing = world.getFacing();
    label_3:
    while (true) {
      turn_dir(exec);
if(exec){world.moveForward(1,false); while (world.getFacing() != facing) { world.turnRight();} }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FRONT:
      case RIGHT:
      case LEFT:
      case BACK:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
    }
if(exec){ salida = "Command: run-dirs"; }
}

  final public void move_face(boolean exec) throws ParseException {int x;
    x = num();
    face(exec);
if(exec){world.moveForward(x,false);salida="Command: move-face";}
}

  final public boolean condition() throws ParseException {int x;Token object;boolean result;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FACING:{
      jj_consume_token(FACING);
      jj_consume_token(CARDINAL);
String O = token.image;
                 int orientation;
                 if (O.equals(":north")) {orientation = NORTH;}
                 else if (O.equals(":south")) {orientation = SOUTH;}
                 else if (O.equals(":east")) {orientation = EAST;}
                 else {orientation = WEST;}
                 if (world.getFacing() == orientation) { {if ("" != null) return true;} } { {if ("" != null) return false;} }
      break;
      }
    case BLOCKED:{
      jj_consume_token(BLOCKED);
x = world.getPosition().x; int facing = world.getFacing();
                   int y = world.getPosition().y; int tam = world.getN();
                        if (facing == NORTH && y >1) { {if ("" != null) return world.isBlocked(new Point(x, y-1));} }
                        else if (facing == SOUTH && y < tam) { {if ("" != null) return world.isBlocked(new Point(x, y+1));} }
                        else if (facing == WEST && x < tam) { {if ("" != null) return world.isBlocked(new Point(x+1, y));} }
                        else if (facing == EAST && x > 1) { {if ("" != null) return world.isBlocked(new Point(x-1, y));} }
                        {if ("" != null) return true;}
      break;
      }
    case CANPUT:{
      jj_consume_token(CANPUT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHIPS:{
        object = jj_consume_token(CHIPS);
        break;
        }
      case BALLOONS:{
        object = jj_consume_token(BALLOONS);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = num();
if (object.image.equals(":CHIPS")) {
                     if (x <= world.freeSpacesForChips() && x <= world.getMyChips()) { {if ("" != null) return true;} }else { {if ("" != null) return false;} } }
                   else { if (x<= world.getMyBalloons()) { {if ("" != null) return true;} }else { {if ("" != null) return false;} } }
      break;
      }
    case CANPICK:{
      jj_consume_token(CANPICK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHIPS:{
        object = jj_consume_token(CHIPS);
        break;
        }
      case BALLOONS:{
        object = jj_consume_token(BALLOONS);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = num();
if (object.image.equals(":CHIPS")) { if (x<= world.chipsToPick()) { {if ("" != null) return true;} }else { {if ("" != null) return false;} } }
                 else { if (x<= world.countBalloons()) { {if ("" != null) return true;} }else { {if ("" != null) return false;} } }
      break;
      }
    case CANMOVE:{
      jj_consume_token(CANMOVE);
      object = jj_consume_token(CARDINAL);
x = world.getPosition().x;
                   int y = world.getPosition().y; int tam = world.getN();
                        if (object.image.equals(":north") && y >1) { {if ("" != null) return !world.isBlocked(new Point(x, y-1));} }
                        else if (object.image.equals(":south") && y < tam) { {if ("" != null) return !world.isBlocked(new Point(x, y+1));} }
                        else if (object.image.equals(":west") && x < tam) { {if ("" != null) return !world.isBlocked(new Point(x+1, y));} }
                        else if (object.image.equals(":east") && x > 1) { {if ("" != null) return !world.isBlocked(new Point(x-1, y));} }
                        {if ("" != null) return false;}
      break;
      }
    case ISZERO:{
      jj_consume_token(ISZERO);
      x = num();
{if ("" != null) return x == 0;}
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      result = condition();
{if ("" != null) return !result;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void fun_call(String fun,boolean exec) throws ParseException, Error {ArrayList<Integer> p_values = new ArrayList<Integer>();int p_count = 0; int p;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTANT:
      case NOMBRE:
      case NUM:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      p = num();
p_values.add((Integer) p); p_count++;
    }
if (p_count != listaProcedures.get(fun).size()) { {if (true) throw new Error("Unmatched parameter number for "+fun);} }
}

  final public int num() throws ParseException, Error {int total=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      jj_consume_token(NUM);
try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                        }
      break;
      }
    case CONSTANT:{
      jj_consume_token(CONSTANT);
String constant = token.image;
                        if (constant.equals("Dim")) {total = world.getN(); }
                        else if (constant.equals("myXpos")) {total = (int) world.getPosition().getX(); }
                        else if (constant.equals("myYpos")) {total = (int) world.getPosition().getY(); }
                        else if (constant.equals("myChips")) {total = world.getMyChips(); }
                        else if (constant.equals("myBalloons")) {total = world.getMyBalloons(); }
                        else if (constant.equals("balloonsHere")) {total = world.countBalloons(); }
                        else if (constant.equals("chipsHere")) {total = world.chipsToPick(); }
                        else {total = world.freeSpacesForChips(); }
      break;
      }
    case NOMBRE:{
      jj_consume_token(NOMBRE);
if (!listaVariables.containsKey(token.image)) {{if (true) throw new Error("Not variable named "+token.image);} }
                        total = listaVariables.get(token.image);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

  final public String name() throws ParseException {String valor="";
 Token token;
    token = jj_consume_token(NOMBRE);
valor = token.image;
  {if ("" != null) return valor;}
    throw new Error("Missing return statement in function");
}

  final public String direc() throws ParseException {String direccion ="";
        Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      token = jj_consume_token(LEFT);
      break;
      }
    case RIGHT:{
      token = jj_consume_token(RIGHT);
      break;
      }
    case FRONT:{
      token = jj_consume_token(FRONT);
      break;
      }
    case BACK:{
      token = jj_consume_token(BACK);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
direccion = token.image;
           {if ("" != null) return direccion;}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1,0x0,0xf8ffe0,0x1,0x30000,0x30000,0x0,0x80000000,0x80000000,0x30000,0x30000,0x7f000000,0x40000,0x40000,0x80000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x200,0x20,0x20,0x200,0x0,0x0,0xb,0x7,0x7,0x0,0x0,0x0,0xa0,0xa0,0x7,};
	}

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[43];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 15; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 43; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
